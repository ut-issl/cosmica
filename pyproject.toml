[project]
name = "cosmica"
version = "0.0.1.dev1"
description = "COnstellation Satellite siMulator for optIcal CommunicAtion"
readme = "README.md"
requires-python = ">=3.13"
authors = [
  { name = "Shunichiro Nomura", email = "nomura@space.t.u-tokyo.ac.jp" },
  { name = "VinÃ­cius Nery", email = "viniciusfnery@space.t.u-tokyo.ac.jp" },
  { name = "Kazuki Takashima", email = "takashima@space.t.u-tokyo.ac.jp" },
]
classifiers = ["Development Status :: 2 - Pre-Alpha"]
dependencies = ["typing-extensions>=4.14.0"]

[project.urls]
Documentation = "https://www.space.t.u-tokyo.ac.jp/cosmica/"
Issues = "https://github.com/ut-issl/cosmica/issues"
Repository = "https://github.com/ut-issl/cosmica"

[dependency-groups]
dev = [
  "pre-commit>=4.2.0",
  { include-group = "docs" },
  { include-group = "ruff" },
  { include-group = "test" },
  { include-group = "typing" },
]
docs = [
  "black>=25.1.0",
  "griffe-typingdoc>=0.2.8",
  "mike>=2.1.3",
  "mkdocs-gen-files>=0.5.0",
  "mkdocs-literate-nav>=0.6.2",
  "mkdocs-material>=9.6.16",
  "mkdocs-section-index>=0.3.10",
  "mkdocstrings[python]>=0.30.0",
]
ruff = ["ruff>=0.11.13"]
test = ["coverage>=7.8.2", "pytest>=8.4.1"]
typing = [
  "mypy>=1.16.1",
  { include-group = "test" },
]

[build-system]
requires = ["uv_build>=0.9,<0.10"]
build-backend = "uv_build"

[tool.coverage.run]
source = ["src/cosmica"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]

[tool.mypy]
strict = true

[tool.pytest.ini_options]
addopts = "-ra --verbose --verbose --capture=no --strict-markers --color=yes --log-cli-level=INFO"
testpaths = ["tests"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
# Modify the following rules according to your preferences
ignore = [
  # "PLR2004", # magic numbers
  "S101",  # use of assert
  "G",  # logging format
  # "ANN101",  # missing type annotation for self in method
  #     "ANN102",  # missing type annotation for cls in classmethod
  #     "D100",    # missing docstring in public module
  #     "D101",    # missing docstring in public class
  #     "D102",    # missing docstring in public method
  #     "D103",    # missing docstring in public function
  #     "D104",    # missing docstring in public package
  #     "D105",    # missing docstring in magic method
  #     "D107",    # missing docstring in __init__
  "D203",  # 1 blank line required before class docstring
  "D213",  # multi-line docstring summary should start at the second line
  # "PGH003",  # Use specific rule codes when ignoring type issues
  #     "RET505",  # Unnecessary `else` after `return` statement
  "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
  # "D401",    # First line should be in imperative mood
  "TD002",  # Missing author in TODO
  "TD003",  # add link on issue into TODO
  # "PLR0913", # Too many arguments to function call
  #     "D407",    # Missing dashed underline after section
  #     "ERA001",  # Commented out code
  "FIX002",  # Fixme comment
  # "S311",    # suspicious-non-cryptographic-random-usage
  #     "EM101",   # raw-string-in-exception
  #     "TRY003",  # Avoid specifying long messages outside the exception class
  # "UP040", # uses `TypeAlias` annotation instead of the `type` keyword. This is to be compatible with griffe.
]
unfixable = [
  "F401",  # Prevent auto-fix for unused imports
]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = [
  "D",  # Docstring
  "INP001",  # implicit-namespace-package
  "ANN201",  # missing-return-type-undocumented-public-function
  "S101",  # use of assert
]
